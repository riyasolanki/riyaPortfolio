{"ast":null,"code":"'use client';\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useRef } from 'react';\nimport clsx from 'clsx';\nimport makeCancellable from 'make-cancellable-promise';\nimport makeEventProps from 'make-event-props';\nimport mergeRefs from 'merge-refs';\nimport invariant from 'tiny-invariant';\nimport warning from 'warning';\nimport Message from './Message.js';\nimport AnnotationLayer from './Page/AnnotationLayer.js';\nimport Canvas from './Page/Canvas.js';\nimport TextLayer from './Page/TextLayer.js';\nimport PageContext from './PageContext.js';\nimport useDocumentContext from './shared/hooks/useDocumentContext.js';\nimport useResolver from './shared/hooks/useResolver.js';\nimport { cancelRunningTask, isProvided, makePageCallback } from './shared/utils.js';\nconst defaultScale = 1;\n/**\n * Displays a page.\n *\n * Should be placed inside `<Document />`. Alternatively, it can have `pdf` prop passed, which can be obtained from `<Document />`'s `onLoadSuccess` callback function, however some advanced functions like linking between pages inside a document may not be working correctly.\n */\nexport default function Page(props) {\n  const documentContext = useDocumentContext();\n  const mergedProps = {\n    ...documentContext,\n    ...props\n  };\n  const {\n    _className = 'react-pdf__Page',\n    _enableRegisterUnregisterPage = true,\n    canvasBackground,\n    canvasRef,\n    children,\n    className,\n    customRenderer: CustomRenderer,\n    customTextRenderer,\n    devicePixelRatio,\n    error = 'Failed to load the page.',\n    height,\n    inputRef,\n    loading = 'Loading pageâ€¦',\n    noData = 'No page specified.',\n    onGetAnnotationsError: onGetAnnotationsErrorProps,\n    onGetAnnotationsSuccess: onGetAnnotationsSuccessProps,\n    onGetStructTreeError: onGetStructTreeErrorProps,\n    onGetStructTreeSuccess: onGetStructTreeSuccessProps,\n    onGetTextError: onGetTextErrorProps,\n    onGetTextSuccess: onGetTextSuccessProps,\n    onLoadError: onLoadErrorProps,\n    onLoadSuccess: onLoadSuccessProps,\n    onRenderAnnotationLayerError: onRenderAnnotationLayerErrorProps,\n    onRenderAnnotationLayerSuccess: onRenderAnnotationLayerSuccessProps,\n    onRenderError: onRenderErrorProps,\n    onRenderSuccess: onRenderSuccessProps,\n    onRenderTextLayerError: onRenderTextLayerErrorProps,\n    onRenderTextLayerSuccess: onRenderTextLayerSuccessProps,\n    pageIndex: pageIndexProps,\n    pageNumber: pageNumberProps,\n    pdf,\n    registerPage,\n    renderAnnotationLayer: renderAnnotationLayerProps = true,\n    renderForms = false,\n    renderMode = 'canvas',\n    renderTextLayer: renderTextLayerProps = true,\n    rotate: rotateProps,\n    scale: scaleProps = defaultScale,\n    unregisterPage,\n    width,\n    ...otherProps\n  } = mergedProps;\n  const [pageState, pageDispatch] = useResolver();\n  const {\n    value: page,\n    error: pageError\n  } = pageState;\n  const pageElement = useRef(null);\n  invariant(pdf, 'Attempted to load a page, but no document was specified. Wrap <Page /> in a <Document /> or pass explicit `pdf` prop.');\n  const pageIndex = isProvided(pageNumberProps) ? pageNumberProps - 1 : pageIndexProps !== null && pageIndexProps !== void 0 ? pageIndexProps : null;\n  const pageNumber = pageNumberProps !== null && pageNumberProps !== void 0 ? pageNumberProps : isProvided(pageIndexProps) ? pageIndexProps + 1 : null;\n  const rotate = rotateProps !== null && rotateProps !== void 0 ? rotateProps : page ? page.rotate : null;\n  const scale = useMemo(() => {\n    if (!page) {\n      return null;\n    }\n    // Be default, we'll render page at 100% * scale width.\n    let pageScale = 1;\n    // Passing scale explicitly null would cause the page not to render\n    const scaleWithDefault = scaleProps !== null && scaleProps !== void 0 ? scaleProps : defaultScale;\n    // If width/height is defined, calculate the scale of the page so it could be of desired width.\n    if (width || height) {\n      const viewport = page.getViewport({\n        scale: 1,\n        rotation: rotate\n      });\n      if (width) {\n        pageScale = width / viewport.width;\n      } else if (height) {\n        pageScale = height / viewport.height;\n      }\n    }\n    return scaleWithDefault * pageScale;\n  }, [height, page, rotate, scaleProps, width]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: useEffect intentionally triggered on pdf change\n  useEffect(function hook() {\n    return () => {\n      if (!isProvided(pageIndex)) {\n        // Impossible, but TypeScript doesn't know that\n        return;\n      }\n      if (_enableRegisterUnregisterPage && unregisterPage) {\n        unregisterPage(pageIndex);\n      }\n    };\n  }, [_enableRegisterUnregisterPage, pdf, pageIndex, unregisterPage]);\n  /**\n   * Called when a page is loaded successfully\n   */\n  function onLoadSuccess() {\n    if (onLoadSuccessProps) {\n      if (!page || !scale) {\n        // Impossible, but TypeScript doesn't know that\n        return;\n      }\n      onLoadSuccessProps(makePageCallback(page, scale));\n    }\n    if (_enableRegisterUnregisterPage && registerPage) {\n      if (!isProvided(pageIndex) || !pageElement.current) {\n        // Impossible, but TypeScript doesn't know that\n        return;\n      }\n      registerPage(pageIndex, pageElement.current);\n    }\n  }\n  /**\n   * Called when a page failed to load\n   */\n  function onLoadError() {\n    if (!pageError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, pageError.toString());\n    if (onLoadErrorProps) {\n      onLoadErrorProps(pageError);\n    }\n  }\n  // biome-ignore lint/correctness/useExhaustiveDependencies: useEffect intentionally triggered on pdf and pageIndex change\n  useEffect(function resetPage() {\n    pageDispatch({\n      type: 'RESET'\n    });\n  }, [pageDispatch, pdf, pageIndex]);\n  useEffect(function loadPage() {\n    if (!pdf || !pageNumber) {\n      return;\n    }\n    const cancellable = makeCancellable(pdf.getPage(pageNumber));\n    const runningTask = cancellable;\n    cancellable.promise.then(nextPage => {\n      pageDispatch({\n        type: 'RESOLVE',\n        value: nextPage\n      });\n    }).catch(error => {\n      pageDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(runningTask);\n  }, [pageDispatch, pdf, pageNumber]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Omitted callbacks so they are not called every time they change\n  useEffect(() => {\n    if (page === undefined) {\n      return;\n    }\n    if (page === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  }, [page, scale]);\n  const childContext = useMemo(() =>\n  // Technically there cannot be page without pageIndex, pageNumber, rotate and scale, but TypeScript doesn't know that\n  isProvided(pageIndex) && pageNumber && isProvided(rotate) && isProvided(scale) ? {\n    _className,\n    canvasBackground,\n    customTextRenderer,\n    devicePixelRatio,\n    onGetAnnotationsError: onGetAnnotationsErrorProps,\n    onGetAnnotationsSuccess: onGetAnnotationsSuccessProps,\n    onGetStructTreeError: onGetStructTreeErrorProps,\n    onGetStructTreeSuccess: onGetStructTreeSuccessProps,\n    onGetTextError: onGetTextErrorProps,\n    onGetTextSuccess: onGetTextSuccessProps,\n    onRenderAnnotationLayerError: onRenderAnnotationLayerErrorProps,\n    onRenderAnnotationLayerSuccess: onRenderAnnotationLayerSuccessProps,\n    onRenderError: onRenderErrorProps,\n    onRenderSuccess: onRenderSuccessProps,\n    onRenderTextLayerError: onRenderTextLayerErrorProps,\n    onRenderTextLayerSuccess: onRenderTextLayerSuccessProps,\n    page,\n    pageIndex,\n    pageNumber,\n    renderForms,\n    renderTextLayer: renderTextLayerProps,\n    rotate,\n    scale\n  } : null, [_className, canvasBackground, customTextRenderer, devicePixelRatio, onGetAnnotationsErrorProps, onGetAnnotationsSuccessProps, onGetStructTreeErrorProps, onGetStructTreeSuccessProps, onGetTextErrorProps, onGetTextSuccessProps, onRenderAnnotationLayerErrorProps, onRenderAnnotationLayerSuccessProps, onRenderErrorProps, onRenderSuccessProps, onRenderTextLayerErrorProps, onRenderTextLayerSuccessProps, page, pageIndex, pageNumber, renderForms, renderTextLayerProps, rotate, scale]);\n  const eventProps = useMemo(() => makeEventProps(otherProps, () => page ? scale ? makePageCallback(page, scale) : undefined : page),\n  // biome-ignore lint/correctness/useExhaustiveDependencies: FIXME\n  [otherProps, page, scale]);\n  const pageKey = `${pageIndex}@${scale}/${rotate}`;\n  function renderMainLayer() {\n    switch (renderMode) {\n      case 'custom':\n        {\n          invariant(CustomRenderer, `renderMode was set to \"custom\", but no customRenderer was passed.`);\n          return _jsx(CustomRenderer, {}, `${pageKey}_custom`);\n        }\n      case 'none':\n        return null;\n      case 'canvas':\n      default:\n        return _jsx(Canvas, {\n          canvasRef: canvasRef\n        }, `${pageKey}_canvas`);\n    }\n  }\n  function renderTextLayer() {\n    if (!renderTextLayerProps) {\n      return null;\n    }\n    return _jsx(TextLayer, {}, `${pageKey}_text`);\n  }\n  function renderAnnotationLayer() {\n    if (!renderAnnotationLayerProps) {\n      return null;\n    }\n    return _jsx(AnnotationLayer, {}, `${pageKey}_annotations`);\n  }\n  function renderChildren() {\n    function isFulfilledContext(context) {\n      return Boolean(context === null || context === void 0 ? void 0 : context.page);\n    }\n    if (!isFulfilledContext(childContext)) {\n      // Impossible, but TypeScript doesn't know that\n      throw new Error('page is undefined');\n    }\n    const resolvedChildren = typeof children === 'function' ? children(childContext) : children;\n    return _jsxs(PageContext.Provider, {\n      value: childContext,\n      children: [renderMainLayer(), renderTextLayer(), renderAnnotationLayer(), resolvedChildren]\n    });\n  }\n  function renderContent() {\n    if (!pageNumber) {\n      return _jsx(Message, {\n        type: \"no-data\",\n        children: typeof noData === 'function' ? noData() : noData\n      });\n    }\n    if (pdf === null || page === undefined || page === null) {\n      return _jsx(Message, {\n        type: \"loading\",\n        children: typeof loading === 'function' ? loading() : loading\n      });\n    }\n    if (pdf === false || page === false) {\n      return _jsx(Message, {\n        type: \"error\",\n        children: typeof error === 'function' ? error() : error\n      });\n    }\n    return renderChildren();\n  }\n  return _jsx(\"div\", {\n    className: clsx(_className, className),\n    \"data-page-number\": pageNumber,\n    // Assertion is needed for React 18 compatibility\n    ref: mergeRefs(inputRef, pageElement),\n    style: {\n      '--scale-round-x': '1px',\n      '--scale-round-y': '1px',\n      '--scale-factor': '1',\n      '--user-unit': `${scale}`,\n      '--total-scale-factor': 'calc(var(--scale-factor) * var(--user-unit))',\n      backgroundColor: canvasBackground || 'white',\n      position: 'relative',\n      minWidth: 'min-content',\n      minHeight: 'min-content'\n    },\n    ...eventProps,\n    children: renderContent()\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}