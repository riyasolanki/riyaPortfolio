{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport invariant from 'tiny-invariant';\nimport Ref from './Ref.js';\nimport useCachedValue from './shared/hooks/useCachedValue.js';\nimport useDocumentContext from './shared/hooks/useDocumentContext.js';\nimport useOutlineContext from './shared/hooks/useOutlineContext.js';\nexport default function OutlineItem(props) {\n  const documentContext = useDocumentContext();\n  const outlineContext = useOutlineContext();\n  invariant(outlineContext, 'Unable to find Outline context.');\n  const mergedProps = {\n    ...documentContext,\n    ...outlineContext,\n    ...props\n  };\n  const {\n    item,\n    linkService,\n    onItemClick,\n    pdf,\n    ...otherProps\n  } = mergedProps;\n  invariant(pdf, 'Attempted to load an outline, but no document was specified. Wrap <Outline /> in a <Document /> or pass explicit `pdf` prop.');\n  const getDestination = useCachedValue(() => {\n    if (typeof item.dest === 'string') {\n      return pdf.getDestination(item.dest);\n    }\n    return item.dest;\n  });\n  const getPageIndex = useCachedValue(async () => {\n    const destination = await getDestination();\n    if (!destination) {\n      throw new Error('Destination not found.');\n    }\n    const [ref] = destination;\n    return pdf.getPageIndex(new Ref(ref));\n  });\n  const getPageNumber = useCachedValue(async () => {\n    const pageIndex = await getPageIndex();\n    return pageIndex + 1;\n  });\n  function onClick(event) {\n    event.preventDefault();\n    invariant(onItemClick || linkService, 'Either onItemClick callback or linkService must be defined in order to navigate to an outline item.');\n    if (onItemClick) {\n      Promise.all([getDestination(), getPageIndex(), getPageNumber()]).then(_ref => {\n        let [dest, pageIndex, pageNumber] = _ref;\n        onItemClick({\n          dest,\n          pageIndex,\n          pageNumber\n        });\n      });\n    } else if (linkService) {\n      linkService.goToDestination(item.dest);\n    }\n  }\n  function renderSubitems() {\n    if (!item.items || !item.items.length) {\n      return null;\n    }\n    const {\n      items: subitems\n    } = item;\n    return _jsx(\"ul\", {\n      children: subitems.map((subitem, subitemIndex) => _jsx(OutlineItem, {\n        item: subitem,\n        pdf: pdf,\n        ...otherProps\n      }, typeof subitem.dest === 'string' ? subitem.dest : subitemIndex))\n    });\n  }\n  return _jsxs(\"li\", {\n    children: [_jsx(\"a\", {\n      href: \"#\",\n      onClick: onClick,\n      children: item.title\n    }), renderSubitems()]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}