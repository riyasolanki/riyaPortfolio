{"ast":null,"code":"import _slicedToArray from \"D:/Riya/Website/riyaPortfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist';\nimport DocumentContext from '../DocumentContext';\nimport PageContext from '../PageContext';\nimport { useResolver } from '../shared/hooks';\nimport { cancelRunningTask } from '../shared/utils';\nexport default function AnnotationLayer() {\n  var documentContext = useContext(DocumentContext);\n  invariant(documentContext, 'Unable to find Document context. Did you wrap <Page /> in <Document />?');\n  var pageContext = useContext(PageContext);\n  invariant(pageContext, 'Unable to find Page context.');\n  var mergedProps = Object.assign(Object.assign({}, documentContext), pageContext);\n  var imageResourcesPath = mergedProps.imageResourcesPath,\n    linkService = mergedProps.linkService,\n    onGetAnnotationsErrorProps = mergedProps.onGetAnnotationsError,\n    onGetAnnotationsSuccessProps = mergedProps.onGetAnnotationsSuccess,\n    onRenderAnnotationLayerErrorProps = mergedProps.onRenderAnnotationLayerError,\n    onRenderAnnotationLayerSuccessProps = mergedProps.onRenderAnnotationLayerSuccess,\n    page = mergedProps.page,\n    renderForms = mergedProps.renderForms,\n    rotate = mergedProps.rotate,\n    _mergedProps$scale = mergedProps.scale,\n    scale = _mergedProps$scale === void 0 ? 1 : _mergedProps$scale;\n  var _useResolver = useResolver(),\n    _useResolver2 = _slicedToArray(_useResolver, 2),\n    annotationsState = _useResolver2[0],\n    annotationsDispatch = _useResolver2[1];\n  var annotations = annotationsState.value,\n    annotationsError = annotationsState.error;\n  var layerElement = useRef(null);\n  invariant(page, 'Attempted to load page annotations, but no page was specified.');\n  warning(parseInt(window.getComputedStyle(document.body).getPropertyValue('--react-pdf-annotation-layer'), 10) === 1, 'AnnotationLayer styles not found. Read more: https://github.com/wojtekmaj/react-pdf#support-for-annotations');\n  function onLoadSuccess() {\n    if (!annotations) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    if (onGetAnnotationsSuccessProps) {\n      onGetAnnotationsSuccessProps(annotations);\n    }\n  }\n  function onLoadError() {\n    if (!annotationsError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, annotationsError.toString());\n    if (onGetAnnotationsErrorProps) {\n      onGetAnnotationsErrorProps(annotationsError);\n    }\n  }\n  function resetAnnotations() {\n    annotationsDispatch({\n      type: 'RESET'\n    });\n  }\n  useEffect(resetAnnotations, [annotationsDispatch, page]);\n  function loadAnnotations() {\n    if (!page) {\n      return;\n    }\n    var cancellable = makeCancellable(page.getAnnotations());\n    var runningTask = cancellable;\n    cancellable.promise.then(function (nextAnnotations) {\n      annotationsDispatch({\n        type: 'RESOLVE',\n        value: nextAnnotations\n      });\n    }).catch(function (error) {\n      annotationsDispatch({\n        type: 'REJECT',\n        error: error\n      });\n    });\n    return function () {\n      cancelRunningTask(runningTask);\n    };\n  }\n  useEffect(loadAnnotations, [annotationsDispatch, page, renderForms]);\n  useEffect(function () {\n    if (annotations === undefined) {\n      return;\n    }\n    if (annotations === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  },\n  // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [annotations]);\n  function onRenderSuccess() {\n    if (onRenderAnnotationLayerSuccessProps) {\n      onRenderAnnotationLayerSuccessProps();\n    }\n  }\n  function onRenderError(error) {\n    warning(false, \"\".concat(error));\n    if (onRenderAnnotationLayerErrorProps) {\n      onRenderAnnotationLayerErrorProps(error);\n    }\n  }\n  var viewport = useMemo(function () {\n    return page.getViewport({\n      scale: scale,\n      rotation: rotate\n    });\n  }, [page, rotate, scale]);\n  function renderAnnotationLayer() {\n    if (!page || !annotations) {\n      return;\n    }\n    var layer = layerElement.current;\n    if (!layer) {\n      return;\n    }\n    var clonedViewport = viewport.clone({\n      dontFlip: true\n    });\n    var parameters = {\n      annotations: annotations,\n      div: layer,\n      downloadManager: null,\n      imageResourcesPath: imageResourcesPath,\n      linkService: linkService,\n      page: page,\n      renderForms: renderForms,\n      viewport: clonedViewport\n    };\n    layer.innerHTML = '';\n    try {\n      pdfjs.AnnotationLayer.render(parameters);\n      // Intentional immediate callback\n      onRenderSuccess();\n    } catch (error) {\n      onRenderError(error);\n    }\n    return function () {\n      // TODO: Cancel running task?\n    };\n  }\n  useEffect(renderAnnotationLayer,\n  // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [annotations, imageResourcesPath, linkService, page, renderForms, viewport]);\n  return React.createElement(\"div\", {\n    className: \"react-pdf__Page__annotations annotationLayer\",\n    ref: layerElement\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}