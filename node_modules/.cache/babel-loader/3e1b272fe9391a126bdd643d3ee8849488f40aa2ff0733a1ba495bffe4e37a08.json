{"ast":null,"code":"'use client';\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef } from 'react';\nimport clsx from 'clsx';\nimport makeCancellable from 'make-cancellable-promise';\nimport * as pdfjs from 'pdfjs-dist';\nimport invariant from 'tiny-invariant';\nimport warning from 'warning';\nimport usePageContext from '../shared/hooks/usePageContext.js';\nimport useResolver from '../shared/hooks/useResolver.js';\nimport { cancelRunningTask } from '../shared/utils.js';\nfunction isTextItem(item) {\n  return 'str' in item;\n}\nexport default function TextLayer() {\n  const pageContext = usePageContext();\n  invariant(pageContext, 'Unable to find Page context.');\n  const {\n    customTextRenderer,\n    onGetTextError,\n    onGetTextSuccess,\n    onRenderTextLayerError,\n    onRenderTextLayerSuccess,\n    page,\n    pageIndex,\n    pageNumber,\n    rotate,\n    scale\n  } = pageContext;\n  invariant(page, 'Attempted to load page text content, but no page was specified.');\n  const [textContentState, textContentDispatch] = useResolver();\n  const {\n    value: textContent,\n    error: textContentError\n  } = textContentState;\n  const layerElement = useRef(null);\n  warning(Number.parseInt(window.getComputedStyle(document.body).getPropertyValue('--react-pdf-text-layer'), 10) === 1, 'TextLayer styles not found. Read more: https://github.com/wojtekmaj/react-pdf#support-for-text-layer');\n  /**\n   * Called when a page text content is read successfully\n   */\n  function onLoadSuccess() {\n    if (!textContent) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    if (onGetTextSuccess) {\n      onGetTextSuccess(textContent);\n    }\n  }\n  /**\n   * Called when a page text content failed to read successfully\n   */\n  function onLoadError() {\n    if (!textContentError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, textContentError.toString());\n    if (onGetTextError) {\n      onGetTextError(textContentError);\n    }\n  }\n  // biome-ignore lint/correctness/useExhaustiveDependencies: useEffect intentionally triggered on page change\n  useEffect(function resetTextContent() {\n    textContentDispatch({\n      type: 'RESET'\n    });\n  }, [page, textContentDispatch]);\n  useEffect(function loadTextContent() {\n    if (!page) {\n      return;\n    }\n    const cancellable = makeCancellable(page.getTextContent());\n    const runningTask = cancellable;\n    cancellable.promise.then(nextTextContent => {\n      textContentDispatch({\n        type: 'RESOLVE',\n        value: nextTextContent\n      });\n    }).catch(error => {\n      textContentDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(runningTask);\n  }, [page, textContentDispatch]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Omitted callbacks so they are not called every time they change\n  useEffect(() => {\n    if (textContent === undefined) {\n      return;\n    }\n    if (textContent === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  }, [textContent]);\n  /**\n   * Called when a text layer is rendered successfully\n   */\n  const onRenderSuccess = useCallback(() => {\n    if (onRenderTextLayerSuccess) {\n      onRenderTextLayerSuccess();\n    }\n  }, [onRenderTextLayerSuccess]);\n  /**\n   * Called when a text layer failed to render successfully\n   */\n  const onRenderError = useCallback(error => {\n    warning(false, error.toString());\n    if (onRenderTextLayerError) {\n      onRenderTextLayerError(error);\n    }\n  }, [onRenderTextLayerError]);\n  function onMouseDown() {\n    const layer = layerElement.current;\n    if (!layer) {\n      return;\n    }\n    layer.classList.add('selecting');\n  }\n  function onMouseUp() {\n    const layer = layerElement.current;\n    if (!layer) {\n      return;\n    }\n    layer.classList.remove('selecting');\n  }\n  const viewport = useMemo(() => page.getViewport({\n    scale,\n    rotation: rotate\n  }), [page, rotate, scale]);\n  useLayoutEffect(function renderTextLayer() {\n    if (!page || !textContent) {\n      return;\n    }\n    const {\n      current: layer\n    } = layerElement;\n    if (!layer) {\n      return;\n    }\n    layer.innerHTML = '';\n    const textContentSource = page.streamTextContent({\n      includeMarkedContent: true\n    });\n    const parameters = {\n      container: layer,\n      textContentSource,\n      viewport\n    };\n    const cancellable = new pdfjs.TextLayer(parameters);\n    const runningTask = cancellable;\n    cancellable.render().then(() => {\n      const end = document.createElement('div');\n      end.className = 'endOfContent';\n      layer.append(end);\n      const layerChildren = layer.querySelectorAll('[role=\"presentation\"]');\n      if (customTextRenderer) {\n        let index = 0;\n        textContent.items.forEach((item, itemIndex) => {\n          if (!isTextItem(item)) {\n            return;\n          }\n          const child = layerChildren[index];\n          if (!child) {\n            return;\n          }\n          const content = customTextRenderer({\n            pageIndex,\n            pageNumber,\n            itemIndex,\n            ...item\n          });\n          child.innerHTML = content;\n          index += item.str && item.hasEOL ? 2 : 1;\n        });\n      }\n      // Intentional immediate callback\n      onRenderSuccess();\n    }).catch(onRenderError);\n    return () => cancelRunningTask(runningTask);\n  }, [customTextRenderer, onRenderError, onRenderSuccess, page, pageIndex, pageNumber, textContent, viewport]);\n  return (\n    // biome-ignore lint/a11y/noStaticElementInteractions: False positive caused by non interactive wrapper listening for bubbling events\n    _jsx(\"div\", {\n      className: clsx('react-pdf__Page__textContent', 'textLayer'),\n      onMouseUp: onMouseUp,\n      onMouseDown: onMouseDown,\n      ref: layerElement\n    })\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}