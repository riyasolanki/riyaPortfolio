{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport invariant from 'tiny-invariant';\nimport DocumentContext from './DocumentContext';\nimport OutlineContext from './OutlineContext';\nimport Ref from './Ref';\nimport { isDefined } from './shared/utils';\nfunction useCachedValue(getter) {\n  const ref = useRef();\n  const currentValue = ref.current;\n  if (isDefined(currentValue)) {\n    return () => currentValue;\n  }\n  return () => {\n    const value = getter();\n    ref.current = value;\n    return value;\n  };\n}\nexport default function OutlineItem(props) {\n  const documentContext = useContext(DocumentContext);\n  invariant(documentContext, 'Unable to find Document context. Did you wrap <Outline /> in <Document />?');\n  const outlineContext = useContext(OutlineContext);\n  invariant(outlineContext, 'Unable to find Outline context.');\n  const mergedProps = Object.assign(Object.assign(Object.assign({}, documentContext), outlineContext), props);\n  const {\n      item,\n      onClick: onClickProps,\n      pdf\n    } = mergedProps,\n    otherProps = __rest(mergedProps, [\"item\", \"onClick\", \"pdf\"]);\n  invariant(pdf, 'Attempted to load an outline, but no document was specified.');\n  const getDestination = useCachedValue(() => {\n    if (typeof item.dest === 'string') {\n      return pdf.getDestination(item.dest);\n    }\n    return item.dest;\n  });\n  const getPageIndex = useCachedValue(() => __awaiter(this, void 0, void 0, function* () {\n    const destination = yield getDestination();\n    if (!destination) {\n      throw new Error('Destination not found.');\n    }\n    const [ref] = destination;\n    return pdf.getPageIndex(new Ref(ref));\n  }));\n  const getPageNumber = useCachedValue(() => __awaiter(this, void 0, void 0, function* () {\n    const pageIndex = yield getPageIndex();\n    return pageIndex + 1;\n  }));\n  function onClick(event) {\n    event.preventDefault();\n    if (!onClickProps) {\n      return false;\n    }\n    return Promise.all([getDestination(), getPageIndex(), getPageNumber()]).then(_ref => {\n      let [dest, pageIndex, pageNumber] = _ref;\n      onClickProps({\n        dest,\n        pageIndex,\n        pageNumber\n      });\n    });\n  }\n  function renderSubitems() {\n    if (!item.items || !item.items.length) {\n      return null;\n    }\n    const {\n      items: subitems\n    } = item;\n    return React.createElement(\"ul\", null, subitems.map((subitem, subitemIndex) => React.createElement(OutlineItem, Object.assign({\n      key: typeof subitem.dest === 'string' ? subitem.dest : subitemIndex,\n      item: subitem\n    }, otherProps))));\n  }\n  return React.createElement(\"li\", null, React.createElement(\"a\", {\n    href: \"#\",\n    onClick: onClick\n  }, item.title), renderSubitems());\n}\nconst isDestination = PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.any)]);\nOutlineItem.propTypes = {\n  item: PropTypes.shape({\n    dest: isDestination,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      dest: isDestination,\n      title: PropTypes.string\n    })),\n    title: PropTypes.string\n  }).isRequired\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}