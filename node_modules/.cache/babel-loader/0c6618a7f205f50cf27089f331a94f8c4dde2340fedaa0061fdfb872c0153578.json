{"ast":null,"code":"'use client';\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useRef } from 'react';\nimport clsx from 'clsx';\nimport { dequal } from 'dequal';\nimport makeCancellable from 'make-cancellable-promise';\nimport makeEventProps from 'make-event-props';\nimport * as pdfjs from 'pdfjs-dist';\nimport invariant from 'tiny-invariant';\nimport warning from 'warning';\nimport DocumentContext from './DocumentContext.js';\nimport LinkService from './LinkService.js';\nimport Message from './Message.js';\nimport PasswordResponses from './PasswordResponses.js';\nimport useResolver from './shared/hooks/useResolver.js';\nimport { cancelRunningTask, dataURItoByteString, displayCORSWarning, isArrayBuffer, isBlob, isBrowser, isDataURI, loadFromFile } from './shared/utils.js';\nconst {\n  PDFDataRangeTransport\n} = pdfjs;\nconst defaultOnPassword = (callback, reason) => {\n  switch (reason) {\n    case PasswordResponses.NEED_PASSWORD:\n      {\n        const password = prompt('Enter the password to open this PDF file.');\n        callback(password);\n        break;\n      }\n    case PasswordResponses.INCORRECT_PASSWORD:\n      {\n        const password = prompt('Invalid password. Please try again.');\n        callback(password);\n        break;\n      }\n    default:\n  }\n};\nfunction isParameterObject(file) {\n  return typeof file === 'object' && file !== null && ('data' in file || 'range' in file || 'url' in file);\n}\n/**\n * Loads a document passed using `file` prop.\n */\nconst Document = forwardRef(function Document(_ref, ref) {\n  let {\n    children,\n    className,\n    error = 'Failed to load PDF file.',\n    externalLinkRel,\n    externalLinkTarget,\n    file,\n    inputRef,\n    imageResourcesPath,\n    loading = 'Loading PDFâ€¦',\n    noData = 'No PDF file specified.',\n    onItemClick,\n    onLoadError: onLoadErrorProps,\n    onLoadProgress,\n    onLoadSuccess: onLoadSuccessProps,\n    onPassword = defaultOnPassword,\n    onSourceError: onSourceErrorProps,\n    onSourceSuccess: onSourceSuccessProps,\n    options,\n    renderMode,\n    rotate,\n    scale,\n    ...otherProps\n  } = _ref;\n  const [sourceState, sourceDispatch] = useResolver();\n  const {\n    value: source,\n    error: sourceError\n  } = sourceState;\n  const [pdfState, pdfDispatch] = useResolver();\n  const {\n    value: pdf,\n    error: pdfError\n  } = pdfState;\n  const linkService = useRef(new LinkService());\n  const pages = useRef([]);\n  const prevFile = useRef(undefined);\n  const prevOptions = useRef(undefined);\n  if (file && file !== prevFile.current && isParameterObject(file)) {\n    warning(!dequal(file, prevFile.current), `File prop passed to <Document /> changed, but it's equal to previous one. This might result in unnecessary reloads. Consider memoizing the value passed to \"file\" prop.`);\n    prevFile.current = file;\n  }\n  // Detect non-memoized changes in options prop\n  if (options && options !== prevOptions.current) {\n    warning(!dequal(options, prevOptions.current), `Options prop passed to <Document /> changed, but it's equal to previous one. This might result in unnecessary reloads. Consider memoizing the value passed to \"options\" prop.`);\n    prevOptions.current = options;\n  }\n  const viewer = useRef({\n    // Handling jumping to internal links target\n    scrollPageIntoView: args => {\n      const {\n        dest,\n        pageNumber,\n        pageIndex = pageNumber - 1\n      } = args;\n      // First, check if custom handling of onItemClick was provided\n      if (onItemClick) {\n        onItemClick({\n          dest,\n          pageIndex,\n          pageNumber\n        });\n        return;\n      }\n      // If not, try to look for target page within the <Document>.\n      const page = pages.current[pageIndex];\n      if (page) {\n        // Scroll to the page automatically\n        page.scrollIntoView();\n        return;\n      }\n      warning(false, `An internal link leading to page ${pageNumber} was clicked, but neither <Document> was provided with onItemClick nor it was able to find the page within itself. Either provide onItemClick to <Document> and handle navigating by yourself or ensure that all pages are rendered within <Document>.`);\n    }\n  });\n  useImperativeHandle(ref, () => ({\n    linkService,\n    pages,\n    viewer\n  }), []);\n  /**\n   * Called when a document source is resolved correctly\n   */\n  function onSourceSuccess() {\n    if (onSourceSuccessProps) {\n      onSourceSuccessProps();\n    }\n  }\n  /**\n   * Called when a document source failed to be resolved correctly\n   */\n  function onSourceError() {\n    if (!sourceError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, sourceError.toString());\n    if (onSourceErrorProps) {\n      onSourceErrorProps(sourceError);\n    }\n  }\n  function resetSource() {\n    sourceDispatch({\n      type: 'RESET'\n    });\n  }\n  // biome-ignore lint/correctness/useExhaustiveDependencies: See https://github.com/biomejs/biome/issues/3080\n  useEffect(resetSource, [file, sourceDispatch]);\n  const findDocumentSource = useCallback(async () => {\n    if (!file) {\n      return null;\n    }\n    // File is a string\n    if (typeof file === 'string') {\n      if (isDataURI(file)) {\n        const fileByteString = dataURItoByteString(file);\n        return {\n          data: fileByteString\n        };\n      }\n      displayCORSWarning();\n      return {\n        url: file\n      };\n    }\n    // File is PDFDataRangeTransport\n    if (file instanceof PDFDataRangeTransport) {\n      return {\n        range: file\n      };\n    }\n    // File is an ArrayBuffer\n    if (isArrayBuffer(file)) {\n      return {\n        data: file\n      };\n    }\n    /**\n     * The cases below are browser-only.\n     * If you're running on a non-browser environment, these cases will be of no use.\n     */\n    if (isBrowser) {\n      // File is a Blob\n      if (isBlob(file)) {\n        const data = await loadFromFile(file);\n        return {\n          data\n        };\n      }\n    }\n    // At this point, file must be an object\n    invariant(typeof file === 'object', 'Invalid parameter in file, need either Uint8Array, string or a parameter object');\n    invariant(isParameterObject(file), 'Invalid parameter object: need either .data, .range or .url');\n    // File .url is a string\n    if ('url' in file && typeof file.url === 'string') {\n      if (isDataURI(file.url)) {\n        const {\n          url,\n          ...otherParams\n        } = file;\n        const fileByteString = dataURItoByteString(url);\n        return {\n          data: fileByteString,\n          ...otherParams\n        };\n      }\n      displayCORSWarning();\n    }\n    return file;\n  }, [file]);\n  useEffect(() => {\n    const cancellable = makeCancellable(findDocumentSource());\n    cancellable.promise.then(nextSource => {\n      sourceDispatch({\n        type: 'RESOLVE',\n        value: nextSource\n      });\n    }).catch(error => {\n      sourceDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => {\n      cancelRunningTask(cancellable);\n    };\n  }, [findDocumentSource, sourceDispatch]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Omitted callbacks so they are not called every time they change\n  useEffect(() => {\n    if (typeof source === 'undefined') {\n      return;\n    }\n    if (source === false) {\n      onSourceError();\n      return;\n    }\n    onSourceSuccess();\n  }, [source]);\n  /**\n   * Called when a document is read successfully\n   */\n  function onLoadSuccess() {\n    if (!pdf) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    if (onLoadSuccessProps) {\n      onLoadSuccessProps(pdf);\n    }\n    pages.current = new Array(pdf.numPages);\n    linkService.current.setDocument(pdf);\n  }\n  /**\n   * Called when a document failed to read successfully\n   */\n  function onLoadError() {\n    if (!pdfError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, pdfError.toString());\n    if (onLoadErrorProps) {\n      onLoadErrorProps(pdfError);\n    }\n  }\n  // biome-ignore lint/correctness/useExhaustiveDependencies: useEffect intentionally triggered on source change\n  useEffect(function resetDocument() {\n    pdfDispatch({\n      type: 'RESET'\n    });\n  }, [pdfDispatch, source]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Omitted callbacks so they are not called every time they change\n  useEffect(function loadDocument() {\n    if (!source) {\n      return;\n    }\n    const documentInitParams = options ? {\n      ...source,\n      ...options\n    } : source;\n    const destroyable = pdfjs.getDocument(documentInitParams);\n    if (onLoadProgress) {\n      destroyable.onProgress = onLoadProgress;\n    }\n    if (onPassword) {\n      destroyable.onPassword = onPassword;\n    }\n    const loadingTask = destroyable;\n    const loadingPromise = loadingTask.promise.then(nextPdf => {\n      pdfDispatch({\n        type: 'RESOLVE',\n        value: nextPdf\n      });\n    }).catch(error => {\n      if (loadingTask.destroyed) {\n        return;\n      }\n      pdfDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => {\n      loadingPromise.finally(() => loadingTask.destroy());\n    };\n  }, [options, pdfDispatch, source]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Omitted callbacks so they are not called every time they change\n  useEffect(() => {\n    if (typeof pdf === 'undefined') {\n      return;\n    }\n    if (pdf === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  }, [pdf]);\n  useEffect(function setupLinkService() {\n    linkService.current.setViewer(viewer.current);\n    linkService.current.setExternalLinkRel(externalLinkRel);\n    linkService.current.setExternalLinkTarget(externalLinkTarget);\n  }, [externalLinkRel, externalLinkTarget]);\n  const registerPage = useCallback((pageIndex, ref) => {\n    pages.current[pageIndex] = ref;\n  }, []);\n  const unregisterPage = useCallback(pageIndex => {\n    delete pages.current[pageIndex];\n  }, []);\n  const childContext = useMemo(() => ({\n    imageResourcesPath,\n    linkService: linkService.current,\n    onItemClick,\n    pdf,\n    registerPage,\n    renderMode,\n    rotate,\n    scale,\n    unregisterPage\n  }), [imageResourcesPath, onItemClick, pdf, registerPage, renderMode, rotate, scale, unregisterPage]);\n  const eventProps = useMemo(() => makeEventProps(otherProps, () => pdf),\n  // biome-ignore lint/correctness/useExhaustiveDependencies: FIXME\n  [otherProps, pdf]);\n  function renderChildren() {\n    function isFulfilledContext(context) {\n      return Boolean(context === null || context === void 0 ? void 0 : context.pdf);\n    }\n    if (!isFulfilledContext(childContext)) {\n      // Impossible, but TypeScript doesn't know that\n      throw new Error('pdf is undefined');\n    }\n    const resolvedChildren = typeof children === 'function' ? children(childContext) : children;\n    return _jsx(DocumentContext.Provider, {\n      value: childContext,\n      children: resolvedChildren\n    });\n  }\n  function renderContent() {\n    if (!file) {\n      return _jsx(Message, {\n        type: \"no-data\",\n        children: typeof noData === 'function' ? noData() : noData\n      });\n    }\n    if (pdf === undefined || pdf === null) {\n      return _jsx(Message, {\n        type: \"loading\",\n        children: typeof loading === 'function' ? loading() : loading\n      });\n    }\n    if (pdf === false) {\n      return _jsx(Message, {\n        type: \"error\",\n        children: typeof error === 'function' ? error() : error\n      });\n    }\n    return renderChildren();\n  }\n  return _jsx(\"div\", {\n    className: clsx('react-pdf__Document', className),\n    // Assertion is needed for React 18 compatibility\n    ref: inputRef,\n    ...eventProps,\n    children: renderContent()\n  });\n});\nexport default Document;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}