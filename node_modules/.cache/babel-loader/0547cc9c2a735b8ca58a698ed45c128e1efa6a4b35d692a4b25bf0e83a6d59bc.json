{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport makeCancellable from 'make-cancellable-promise';\nimport makeEventProps from 'make-event-props';\nimport clsx from 'clsx';\nimport mergeRefs from 'merge-refs';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport DocumentContext from './DocumentContext';\nimport PageContext from './PageContext';\nimport Message from './Message';\nimport PageCanvas from './Page/PageCanvas';\nimport PageSVG from './Page/PageSVG';\nimport TextLayer from './Page/TextLayer';\nimport AnnotationLayer from './Page/AnnotationLayer';\nimport { cancelRunningTask, isProvided, makePageCallback } from './shared/utils';\nimport { useResolver } from './shared/hooks';\nimport { eventProps, isClassName, isPageIndex, isPageNumber, isPdf, isRef, isRenderMode, isRotate } from './shared/propTypes';\nconst defaultScale = 1;\nexport default function Page(props) {\n  const context = useContext(DocumentContext);\n  invariant(context, 'Unable to find Document context. Did you wrap <Page /> in <Document />?');\n  const mergedProps = Object.assign(Object.assign({}, context), props);\n  const {\n      canvasBackground,\n      canvasRef,\n      children,\n      className,\n      customTextRenderer,\n      devicePixelRatio,\n      error = 'Failed to load the page.',\n      height,\n      inputRef,\n      loading = 'Loading pageâ€¦',\n      noData = 'No page specified.',\n      onGetAnnotationsError: onGetAnnotationsErrorProps,\n      onGetAnnotationsSuccess: onGetAnnotationsSuccessProps,\n      onGetTextError: onGetTextErrorProps,\n      onGetTextSuccess: onGetTextSuccessProps,\n      onLoadError: onLoadErrorProps,\n      onLoadSuccess: onLoadSuccessProps,\n      onRenderAnnotationLayerError: onRenderAnnotationLayerErrorProps,\n      onRenderAnnotationLayerSuccess: onRenderAnnotationLayerSuccessProps,\n      onRenderError: onRenderErrorProps,\n      onRenderSuccess: onRenderSuccessProps,\n      onRenderTextLayerError: onRenderTextLayerErrorProps,\n      onRenderTextLayerSuccess: onRenderTextLayerSuccessProps,\n      pageIndex: pageIndexProps,\n      pageNumber: pageNumberProps,\n      pdf,\n      registerPage,\n      renderAnnotationLayer: renderAnnotationLayerProps = true,\n      renderForms = false,\n      renderMode = 'canvas',\n      renderTextLayer: renderTextLayerProps = true,\n      rotate: rotateProps,\n      scale: scaleProps = defaultScale,\n      unregisterPage,\n      width\n    } = mergedProps,\n    otherProps = __rest(mergedProps, [\"canvasBackground\", \"canvasRef\", \"children\", \"className\", \"customTextRenderer\", \"devicePixelRatio\", \"error\", \"height\", \"inputRef\", \"loading\", \"noData\", \"onGetAnnotationsError\", \"onGetAnnotationsSuccess\", \"onGetTextError\", \"onGetTextSuccess\", \"onLoadError\", \"onLoadSuccess\", \"onRenderAnnotationLayerError\", \"onRenderAnnotationLayerSuccess\", \"onRenderError\", \"onRenderSuccess\", \"onRenderTextLayerError\", \"onRenderTextLayerSuccess\", \"pageIndex\", \"pageNumber\", \"pdf\", \"registerPage\", \"renderAnnotationLayer\", \"renderForms\", \"renderMode\", \"renderTextLayer\", \"rotate\", \"scale\", \"unregisterPage\", \"width\"]);\n  const [pageState, pageDispatch] = useResolver();\n  const {\n    value: page,\n    error: pageError\n  } = pageState;\n  const pageElement = useRef(null);\n  invariant(pdf, 'Attempted to load a page, but no document was specified.');\n  const pageIndex = isProvided(pageNumberProps) ? pageNumberProps - 1 : pageIndexProps !== null && pageIndexProps !== void 0 ? pageIndexProps : null;\n  const pageNumber = pageNumberProps !== null && pageNumberProps !== void 0 ? pageNumberProps : isProvided(pageIndexProps) ? pageIndexProps + 1 : null;\n  const rotate = rotateProps !== null && rotateProps !== void 0 ? rotateProps : page ? page.rotate : null;\n  const scale = useMemo(() => {\n    if (!page) {\n      return null;\n    }\n    // Be default, we'll render page at 100% * scale width.\n    let pageScale = 1;\n    // Passing scale explicitly null would cause the page not to render\n    const scaleWithDefault = scaleProps !== null && scaleProps !== void 0 ? scaleProps : defaultScale;\n    // If width/height is defined, calculate the scale of the page so it could be of desired width.\n    if (width || height) {\n      const viewport = page.getViewport({\n        scale: 1,\n        rotation: rotate\n      });\n      if (width) {\n        pageScale = width / viewport.width;\n      } else if (height) {\n        pageScale = height / viewport.height;\n      }\n    }\n    return scaleWithDefault * pageScale;\n  }, [height, page, rotate, scaleProps, width]);\n  function hook() {\n    return () => {\n      if (pageIndex === null) {\n        // Impossible, but TypeScript doesn't know that\n        return;\n      }\n      if (unregisterPage) {\n        unregisterPage(pageIndex);\n      }\n    };\n  }\n  useEffect(hook, [pdf, pageIndex, unregisterPage]);\n  /**\n   * Called when a page is loaded successfully\n   */\n  function onLoadSuccess() {\n    if (onLoadSuccessProps) {\n      if (!page || !scale) {\n        // Impossible, but TypeScript doesn't know that\n        return;\n      }\n      onLoadSuccessProps(makePageCallback(page, scale));\n    }\n    if (registerPage) {\n      if (pageIndex === null || !pageElement.current) {\n        // Impossible, but TypeScript doesn't know that\n        return;\n      }\n      registerPage(pageIndex, pageElement.current);\n    }\n  }\n  /**\n   * Called when a page failed to load\n   */\n  function onLoadError() {\n    if (!pageError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, pageError.toString());\n    if (onLoadErrorProps) {\n      onLoadErrorProps(pageError);\n    }\n  }\n  function resetPage() {\n    pageDispatch({\n      type: 'RESET'\n    });\n  }\n  useEffect(resetPage, [pageDispatch, pdf, pageIndex]);\n  function loadPage() {\n    if (!pdf || !pageNumber) {\n      return;\n    }\n    const cancellable = makeCancellable(pdf.getPage(pageNumber));\n    const runningTask = cancellable;\n    cancellable.promise.then(nextPage => {\n      pageDispatch({\n        type: 'RESOLVE',\n        value: nextPage\n      });\n    }).catch(error => {\n      pageDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(runningTask);\n  }\n  useEffect(loadPage, [pageDispatch, pdf, pageIndex, pageNumber, registerPage]);\n  useEffect(() => {\n    if (page === undefined) {\n      return;\n    }\n    if (page === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  },\n  // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [page, scale]);\n  const childContext =\n  // Technically there cannot be page without pageIndex, pageNumber, rotate and scale, but TypeScript doesn't know that\n  page && isProvided(pageIndex) && isProvided(pageNumber) && isProvided(rotate) && isProvided(scale) ? {\n    canvasBackground,\n    customTextRenderer,\n    devicePixelRatio,\n    onGetAnnotationsError: onGetAnnotationsErrorProps,\n    onGetAnnotationsSuccess: onGetAnnotationsSuccessProps,\n    onGetTextError: onGetTextErrorProps,\n    onGetTextSuccess: onGetTextSuccessProps,\n    onRenderAnnotationLayerError: onRenderAnnotationLayerErrorProps,\n    onRenderAnnotationLayerSuccess: onRenderAnnotationLayerSuccessProps,\n    onRenderError: onRenderErrorProps,\n    onRenderSuccess: onRenderSuccessProps,\n    onRenderTextLayerError: onRenderTextLayerErrorProps,\n    onRenderTextLayerSuccess: onRenderTextLayerSuccessProps,\n    page,\n    pageIndex,\n    pageNumber,\n    renderForms,\n    rotate,\n    scale\n  } : null;\n  const eventProps = useMemo(() => makeEventProps(otherProps, () => page ? scale ? makePageCallback(page, scale) : undefined : page), [otherProps, page, scale]);\n  const pageKey = `${pageIndex}@${scale}/${rotate}`;\n  const pageKeyNoScale = `${pageIndex}/${rotate}`;\n  function renderMainLayer() {\n    switch (renderMode) {\n      case 'none':\n        return null;\n      case 'svg':\n        return React.createElement(PageSVG, {\n          key: `${pageKeyNoScale}_svg`\n        });\n      case 'canvas':\n      default:\n        return React.createElement(PageCanvas, {\n          key: `${pageKey}_canvas`,\n          canvasRef: canvasRef\n        });\n    }\n  }\n  function renderTextLayer() {\n    if (!renderTextLayerProps) {\n      return null;\n    }\n    return React.createElement(TextLayer, {\n      key: `${pageKey}_text`\n    });\n  }\n  function renderAnnotationLayer() {\n    if (!renderAnnotationLayerProps) {\n      return null;\n    }\n    /**\n     * As of now, PDF.js 2.0.943 returns warnings on unimplemented annotations in SVG mode.\n     * Therefore, as a fallback, we render \"traditional\" AnnotationLayer component.\n     */\n    return React.createElement(AnnotationLayer, {\n      key: `${pageKey}_annotations`\n    });\n  }\n  function renderChildren() {\n    return React.createElement(PageContext.Provider, {\n      value: childContext\n    }, renderMainLayer(), renderTextLayer(), renderAnnotationLayer(), children);\n  }\n  function renderContent() {\n    if (!pageNumber) {\n      return React.createElement(Message, {\n        type: \"no-data\"\n      }, typeof noData === 'function' ? noData() : noData);\n    }\n    if (pdf === null || page === undefined || page === null) {\n      return React.createElement(Message, {\n        type: \"loading\"\n      }, typeof loading === 'function' ? loading() : loading);\n    }\n    if (pdf === false || page === false) {\n      return React.createElement(Message, {\n        type: \"error\"\n      }, typeof error === 'function' ? error() : error);\n    }\n    return renderChildren();\n  }\n  return React.createElement(\"div\", Object.assign({\n    className: clsx('react-pdf__Page', className),\n    \"data-page-number\": pageNumber,\n    ref: mergeRefs(inputRef, pageElement),\n    style: {\n      ['--scale-factor']: `${scale}`,\n      backgroundColor: canvasBackground || 'white',\n      position: 'relative',\n      minWidth: 'min-content',\n      minHeight: 'min-content'\n    }\n  }, eventProps), renderContent());\n}\nconst isFunctionOrNode = PropTypes.oneOfType([PropTypes.func, PropTypes.node]);\nPage.propTypes = Object.assign(Object.assign({}, eventProps), {\n  canvasBackground: PropTypes.string,\n  canvasRef: isRef,\n  children: PropTypes.node,\n  className: isClassName,\n  customTextRenderer: PropTypes.func,\n  devicePixelRatio: PropTypes.number,\n  error: isFunctionOrNode,\n  height: PropTypes.number,\n  imageResourcesPath: PropTypes.string,\n  inputRef: isRef,\n  loading: isFunctionOrNode,\n  noData: isFunctionOrNode,\n  onGetTextError: PropTypes.func,\n  onGetTextSuccess: PropTypes.func,\n  onLoadError: PropTypes.func,\n  onLoadSuccess: PropTypes.func,\n  onRenderError: PropTypes.func,\n  onRenderSuccess: PropTypes.func,\n  onRenderTextLayerError: PropTypes.func,\n  onRenderTextLayerSuccess: PropTypes.func,\n  pageIndex: isPageIndex,\n  pageNumber: isPageNumber,\n  pdf: isPdf,\n  renderAnnotationLayer: PropTypes.bool,\n  renderForms: PropTypes.bool,\n  renderMode: isRenderMode,\n  renderTextLayer: PropTypes.bool,\n  rotate: isRotate,\n  scale: PropTypes.number,\n  width: PropTypes.number\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}