{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { allEvents } from 'make-event-props';\nimport { PDFDataRangeTransport } from 'pdfjs-dist';\nimport { isDefined } from './utils';\nimport LinkService from '../LinkService';\nexport const eventProps = (() => {\n  const result = {};\n  allEvents.forEach(eventName => {\n    result[eventName] = PropTypes.func;\n  });\n  return result;\n})();\nconst isTypedArray = PropTypes.oneOfType([PropTypes.instanceOf(Int8Array), PropTypes.instanceOf(Uint8Array), PropTypes.instanceOf(Uint8ClampedArray), PropTypes.instanceOf(Int16Array), PropTypes.instanceOf(Uint16Array), PropTypes.instanceOf(Int32Array), PropTypes.instanceOf(Uint32Array), PropTypes.instanceOf(Float32Array), PropTypes.instanceOf(Float64Array)]);\nconst fileTypes = [PropTypes.string, PropTypes.instanceOf(ArrayBuffer), PropTypes.shape({\n  data: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(ArrayBuffer), PropTypes.arrayOf(PropTypes.number.isRequired), isTypedArray]).isRequired\n}), PropTypes.shape({\n  range: PropTypes.instanceOf(PDFDataRangeTransport).isRequired\n}), PropTypes.shape({\n  url: PropTypes.string.isRequired\n})];\nif (typeof Blob !== 'undefined') {\n  fileTypes.push(PropTypes.instanceOf(Blob));\n}\nexport const isClassName = PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]);\nexport const isFile = PropTypes.oneOfType(fileTypes);\nexport const isLinkService = PropTypes.instanceOf(LinkService);\nexport const isLinkTarget = PropTypes.oneOf(['_self', '_blank', '_parent', '_top']);\nexport const isPage = PropTypes.shape({\n  commonObjs: PropTypes.shape({}).isRequired,\n  getAnnotations: PropTypes.func.isRequired,\n  getTextContent: PropTypes.func.isRequired,\n  getViewport: PropTypes.func.isRequired,\n  render: PropTypes.func.isRequired\n});\nexport function isPageIndex(props, propName, componentName) {\n  const {\n    [propName]: pageIndex,\n    pageNumber,\n    pdf\n  } = props;\n  if (!isDefined(pdf)) {\n    return null;\n  }\n  if (isDefined(pageIndex)) {\n    if (typeof pageIndex !== 'number') {\n      return new Error(`\\`${propName}\\` of type \\`${typeof pageIndex}\\` supplied to \\`${componentName}\\`, expected \\`number\\`.`);\n    }\n    if (pageIndex < 0) {\n      return new Error(`Expected \\`${propName}\\` to be greater or equal to 0.`);\n    }\n    const {\n      numPages\n    } = pdf;\n    if (pageIndex + 1 > numPages) {\n      return new Error(`Expected \\`${propName}\\` to be less or equal to ${numPages - 1}.`);\n    }\n  } else if (!isDefined(pageNumber)) {\n    return new Error(`\\`${propName}\\` not supplied. Either pageIndex or pageNumber must be supplied to \\`${componentName}\\`.`);\n  }\n  // Everything is fine\n  return null;\n}\nexport function isPageNumber(props, propName, componentName) {\n  const {\n    [propName]: pageNumber,\n    pageIndex,\n    pdf\n  } = props;\n  if (!isDefined(pdf)) {\n    return null;\n  }\n  if (isDefined(pageNumber)) {\n    if (typeof pageNumber !== 'number') {\n      return new Error(`\\`${propName}\\` of type \\`${typeof pageNumber}\\` supplied to \\`${componentName}\\`, expected \\`number\\`.`);\n    }\n    if (pageNumber < 1) {\n      return new Error(`Expected \\`${propName}\\` to be greater or equal to 1.`);\n    }\n    const {\n      numPages\n    } = pdf;\n    if (pageNumber > numPages) {\n      return new Error(`Expected \\`${propName}\\` to be less or equal to ${numPages}.`);\n    }\n  } else if (!isDefined(pageIndex)) {\n    return new Error(`\\`${propName}\\` not supplied. Either pageIndex or pageNumber must be supplied to \\`${componentName}\\`.`);\n  }\n  // Everything is fine\n  return null;\n}\nexport const isPdf = PropTypes.oneOfType([PropTypes.shape({\n  getDestination: PropTypes.func.isRequired,\n  getOutline: PropTypes.func.isRequired,\n  getPage: PropTypes.func.isRequired,\n  numPages: PropTypes.number.isRequired\n}), PropTypes.bool]);\nexport const isRef = PropTypes.oneOfType([PropTypes.func, PropTypes.exact({\n  current: PropTypes.any\n})]);\nexport const isRenderMode = PropTypes.oneOf(['canvas', 'none', 'svg']);\nexport const isRotate = PropTypes.oneOf([0, 90, 180, 270]);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}