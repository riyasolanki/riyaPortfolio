{"ast":null,"code":"import _slicedToArray from \"D:/Riya/Website/riyaPortfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\n/**\n * Checks if we're running in a browser environment.\n */\nexport var isBrowser = typeof document !== 'undefined';\n/**\n * Checks whether we're running from a local file system.\n */\nexport var isLocalFileSystem = isBrowser && window.location.protocol === 'file:';\n/**\n * Checks whether a variable is defined.\n *\n * @param {*} variable Variable to check\n */\nexport function isDefined(variable) {\n  return typeof variable !== 'undefined';\n}\n/**\n * Checks whether a variable is defined and not null.\n *\n * @param {*} variable Variable to check\n */\nexport function isProvided(variable) {\n  return isDefined(variable) && variable !== null;\n}\n/**\n * Checks whether a variable provided is a string.\n *\n * @param {*} variable Variable to check\n */\nexport function isString(variable) {\n  return typeof variable === 'string';\n}\n/**\n * Checks whether a variable provided is an ArrayBuffer.\n *\n * @param {*} variable Variable to check\n */\nexport function isArrayBuffer(variable) {\n  return variable instanceof ArrayBuffer;\n}\n/**\n * Checks whether a variable provided is a Blob.\n *\n * @param {*} variable Variable to check\n */\nexport function isBlob(variable) {\n  invariant(isBrowser, 'isBlob can only be used in a browser environment');\n  return variable instanceof Blob;\n}\n/**\n * Checks whether a variable provided is a data URI.\n *\n * @param {*} variable String to check\n */\nexport function isDataURI(variable) {\n  return isString(variable) && /^data:/.test(variable);\n}\nexport function dataURItoByteString(dataURI) {\n  invariant(isDataURI(dataURI), 'Invalid data URI.');\n  var _dataURI$split = dataURI.split(','),\n    _dataURI$split2 = _slicedToArray(_dataURI$split, 2),\n    _dataURI$split2$ = _dataURI$split2[0],\n    headersString = _dataURI$split2$ === void 0 ? '' : _dataURI$split2$,\n    _dataURI$split2$2 = _dataURI$split2[1],\n    dataString = _dataURI$split2$2 === void 0 ? '' : _dataURI$split2$2;\n  var headers = headersString.split(';');\n  if (headers.indexOf('base64') !== -1) {\n    return atob(dataString);\n  }\n  return unescape(dataString);\n}\nexport function getDevicePixelRatio() {\n  return isBrowser && window.devicePixelRatio || 1;\n}\nvar allowFileAccessFromFilesTip = 'On Chromium based browsers, you can use --allow-file-access-from-files flag for debugging purposes.';\nexport function displayCORSWarning() {\n  warning(!isLocalFileSystem, \"Loading PDF as base64 strings/URLs may not work on protocols other than HTTP/HTTPS. \".concat(allowFileAccessFromFilesTip));\n}\nexport function displayWorkerWarning() {\n  warning(!isLocalFileSystem, \"Loading PDF.js worker may not work on protocols other than HTTP/HTTPS. \".concat(allowFileAccessFromFilesTip));\n}\nexport function cancelRunningTask(runningTask) {\n  if (runningTask && runningTask.cancel) runningTask.cancel();\n}\nexport function makePageCallback(page, scale) {\n  Object.defineProperty(page, 'width', {\n    get: function get() {\n      return this.view[2] * scale;\n    },\n    configurable: true\n  });\n  Object.defineProperty(page, 'height', {\n    get: function get() {\n      return this.view[3] * scale;\n    },\n    configurable: true\n  });\n  Object.defineProperty(page, 'originalWidth', {\n    get: function get() {\n      return this.view[2];\n    },\n    configurable: true\n  });\n  Object.defineProperty(page, 'originalHeight', {\n    get: function get() {\n      return this.view[3];\n    },\n    configurable: true\n  });\n  return page;\n}\nexport function isCancelException(error) {\n  return error.name === 'RenderingCancelledException';\n}\nexport function loadFromFile(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onload = function () {\n      if (!reader.result) {\n        return reject(new Error('Error while reading a file.'));\n      }\n      resolve(reader.result);\n    };\n    reader.onerror = function (event) {\n      if (!event.target) {\n        return reject(new Error('Error while reading a file.'));\n      }\n      var error = event.target.error;\n      if (!error) {\n        return reject(new Error('Error while reading a file.'));\n      }\n      switch (error.code) {\n        case error.NOT_FOUND_ERR:\n          return reject(new Error('Error while reading a file: File not found.'));\n        case error.SECURITY_ERR:\n          return reject(new Error('Error while reading a file: Security error.'));\n        case error.ABORT_ERR:\n          return reject(new Error('Error while reading a file: Aborted.'));\n        default:\n          return reject(new Error('Error while reading a file.'));\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}