{"ast":null,"code":"import _slicedToArray from \"D:/Riya/Website/riyaPortfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React, { useCallback, useContext, useEffect, useLayoutEffect, useMemo, useRef } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist';\nimport PageContext from '../PageContext';\nimport { useResolver } from '../shared/hooks';\nimport { cancelRunningTask } from '../shared/utils';\nfunction isTextItem(item) {\n  return 'str' in item;\n}\nexport default function TextLayer() {\n  var context = useContext(PageContext);\n  invariant(context, 'Unable to find Page context.');\n  var customTextRenderer = context.customTextRenderer,\n    onGetTextError = context.onGetTextError,\n    onGetTextSuccess = context.onGetTextSuccess,\n    onRenderTextLayerError = context.onRenderTextLayerError,\n    onRenderTextLayerSuccess = context.onRenderTextLayerSuccess,\n    page = context.page,\n    pageIndex = context.pageIndex,\n    pageNumber = context.pageNumber,\n    rotate = context.rotate,\n    scale = context.scale;\n  var _useResolver = useResolver(),\n    _useResolver2 = _slicedToArray(_useResolver, 2),\n    textContentState = _useResolver2[0],\n    textContentDispatch = _useResolver2[1];\n  var textContent = textContentState.value,\n    textContentError = textContentState.error;\n  var layerElement = useRef(null);\n  var endElement = useRef();\n  invariant(page, 'Attempted to load page text content, but no page was specified.');\n  warning(parseInt(window.getComputedStyle(document.body).getPropertyValue('--react-pdf-text-layer'), 10) === 1, 'TextLayer styles not found. Read more: https://github.com/wojtekmaj/react-pdf#support-for-text-layer');\n  /**\n   * Called when a page text content is read successfully\n   */\n  function onLoadSuccess() {\n    if (!textContent) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    if (onGetTextSuccess) {\n      onGetTextSuccess(textContent);\n    }\n  }\n  /**\n   * Called when a page text content failed to read successfully\n   */\n  function onLoadError() {\n    if (!textContentError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, textContentError.toString());\n    if (onGetTextError) {\n      onGetTextError(textContentError);\n    }\n  }\n  function resetTextContent() {\n    textContentDispatch({\n      type: 'RESET'\n    });\n  }\n  useEffect(resetTextContent, [page, textContentDispatch]);\n  function loadTextContent() {\n    if (!page) {\n      return;\n    }\n    var cancellable = makeCancellable(page.getTextContent());\n    var runningTask = cancellable;\n    cancellable.promise.then(function (nextTextContent) {\n      textContentDispatch({\n        type: 'RESOLVE',\n        value: nextTextContent\n      });\n    }).catch(function (error) {\n      textContentDispatch({\n        type: 'REJECT',\n        error: error\n      });\n    });\n    return function () {\n      return cancelRunningTask(runningTask);\n    };\n  }\n  useEffect(loadTextContent, [page, textContentDispatch]);\n  useEffect(function () {\n    if (textContent === undefined) {\n      return;\n    }\n    if (textContent === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  },\n  // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [textContent]);\n  /**\n   * Called when a text layer is rendered successfully\n   */\n  var onRenderSuccess = useCallback(function () {\n    if (onRenderTextLayerSuccess) {\n      onRenderTextLayerSuccess();\n    }\n  }, [onRenderTextLayerSuccess]);\n  /**\n   * Called when a text layer failed to render successfully\n   */\n  var onRenderError = useCallback(function (error) {\n    warning(false, error.toString());\n    if (onRenderTextLayerError) {\n      onRenderTextLayerError(error);\n    }\n  }, [onRenderTextLayerError]);\n  function onMouseDown() {\n    var end = endElement.current;\n    if (!end) {\n      return;\n    }\n    end.classList.add('active');\n  }\n  function onMouseUp() {\n    var end = endElement.current;\n    if (!end) {\n      return;\n    }\n    end.classList.remove('active');\n  }\n  var viewport = useMemo(function () {\n    return page.getViewport({\n      scale: scale,\n      rotation: rotate\n    });\n  }, [page, rotate, scale]);\n  function renderTextLayer() {\n    if (!page || !textContent) {\n      return;\n    }\n    var layer = layerElement.current;\n    if (!layer) {\n      return;\n    }\n    layer.innerHTML = '';\n    var textContentSource = page.streamTextContent();\n    var parameters = {\n      container: layer,\n      textContentSource: textContentSource,\n      viewport: viewport\n    };\n    var cancellable = pdfjs.renderTextLayer(parameters);\n    var runningTask = cancellable;\n    cancellable.promise.then(function () {\n      var end = document.createElement('div');\n      end.className = 'endOfContent';\n      layer.append(end);\n      endElement.current = end;\n      if (customTextRenderer) {\n        var index = 0;\n        textContent.items.forEach(function (item, itemIndex) {\n          if (!isTextItem(item)) {\n            return;\n          }\n          var child = layer.children[index];\n          if (!child) {\n            return;\n          }\n          var content = customTextRenderer(Object.assign({\n            pageIndex: pageIndex,\n            pageNumber: pageNumber,\n            itemIndex: itemIndex\n          }, item));\n          child.innerHTML = content;\n          index += item.str && item.hasEOL ? 2 : 1;\n        });\n      }\n      // Intentional immediate callback\n      onRenderSuccess();\n    }).catch(onRenderError);\n    return function () {\n      return cancelRunningTask(runningTask);\n    };\n  }\n  useLayoutEffect(renderTextLayer, [customTextRenderer, onRenderError, onRenderSuccess, page, pageIndex, pageNumber, textContent, viewport]);\n  return (\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    React.createElement(\"div\", {\n      className: \"react-pdf__Page__textContent textLayer\",\n      onMouseUp: onMouseUp,\n      onMouseDown: onMouseDown,\n      ref: layerElement\n    })\n  );\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}