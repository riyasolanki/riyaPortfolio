{"ast":null,"code":"'use client';\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useRef } from 'react';\nimport clsx from 'clsx';\nimport makeCancellable from 'make-cancellable-promise';\nimport * as pdfjs from 'pdfjs-dist';\nimport invariant from 'tiny-invariant';\nimport warning from 'warning';\nimport useDocumentContext from '../shared/hooks/useDocumentContext.js';\nimport usePageContext from '../shared/hooks/usePageContext.js';\nimport useResolver from '../shared/hooks/useResolver.js';\nimport { cancelRunningTask } from '../shared/utils.js';\nexport default function AnnotationLayer() {\n  const documentContext = useDocumentContext();\n  const pageContext = usePageContext();\n  invariant(pageContext, 'Unable to find Page context.');\n  const mergedProps = {\n    ...documentContext,\n    ...pageContext\n  };\n  const {\n    imageResourcesPath,\n    linkService,\n    onGetAnnotationsError: onGetAnnotationsErrorProps,\n    onGetAnnotationsSuccess: onGetAnnotationsSuccessProps,\n    onRenderAnnotationLayerError: onRenderAnnotationLayerErrorProps,\n    onRenderAnnotationLayerSuccess: onRenderAnnotationLayerSuccessProps,\n    page,\n    pdf,\n    renderForms,\n    rotate,\n    scale = 1\n  } = mergedProps;\n  invariant(pdf, 'Attempted to load page annotations, but no document was specified. Wrap <Page /> in a <Document /> or pass explicit `pdf` prop.');\n  invariant(page, 'Attempted to load page annotations, but no page was specified.');\n  invariant(linkService, 'Attempted to load page annotations, but no linkService was specified.');\n  const [annotationsState, annotationsDispatch] = useResolver();\n  const {\n    value: annotations,\n    error: annotationsError\n  } = annotationsState;\n  const layerElement = useRef(null);\n  warning(Number.parseInt(window.getComputedStyle(document.body).getPropertyValue('--react-pdf-annotation-layer'), 10) === 1, 'AnnotationLayer styles not found. Read more: https://github.com/wojtekmaj/react-pdf#support-for-annotations');\n  function onLoadSuccess() {\n    if (!annotations) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    if (onGetAnnotationsSuccessProps) {\n      onGetAnnotationsSuccessProps(annotations);\n    }\n  }\n  function onLoadError() {\n    if (!annotationsError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, annotationsError.toString());\n    if (onGetAnnotationsErrorProps) {\n      onGetAnnotationsErrorProps(annotationsError);\n    }\n  }\n  // biome-ignore lint/correctness/useExhaustiveDependencies: useEffect intentionally triggered on page change\n  useEffect(function resetAnnotations() {\n    annotationsDispatch({\n      type: 'RESET'\n    });\n  }, [annotationsDispatch, page]);\n  useEffect(function loadAnnotations() {\n    if (!page) {\n      return;\n    }\n    const cancellable = makeCancellable(page.getAnnotations());\n    const runningTask = cancellable;\n    cancellable.promise.then(nextAnnotations => {\n      annotationsDispatch({\n        type: 'RESOLVE',\n        value: nextAnnotations\n      });\n    }).catch(error => {\n      annotationsDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => {\n      cancelRunningTask(runningTask);\n    };\n  }, [annotationsDispatch, page]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Omitted callbacks so they are not called every time they change\n  useEffect(() => {\n    if (annotations === undefined) {\n      return;\n    }\n    if (annotations === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  }, [annotations]);\n  function onRenderSuccess() {\n    if (onRenderAnnotationLayerSuccessProps) {\n      onRenderAnnotationLayerSuccessProps();\n    }\n  }\n  function onRenderError(error) {\n    warning(false, `${error}`);\n    if (onRenderAnnotationLayerErrorProps) {\n      onRenderAnnotationLayerErrorProps(error);\n    }\n  }\n  const viewport = useMemo(() => page.getViewport({\n    scale,\n    rotation: rotate\n  }), [page, rotate, scale]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Omitted callbacks so they are not called every time they change\n  useEffect(function renderAnnotationLayer() {\n    if (!pdf || !page || !linkService || !annotations) {\n      return;\n    }\n    const {\n      current: layer\n    } = layerElement;\n    if (!layer) {\n      return;\n    }\n    const clonedViewport = viewport.clone({\n      dontFlip: true\n    });\n    const annotationLayerParameters = {\n      accessibilityManager: null,\n      // TODO: Implement this\n      annotationCanvasMap: null,\n      // TODO: Implement this\n      annotationEditorUIManager: null,\n      // TODO: Implement this\n      div: layer,\n      l10n: null,\n      // TODO: Implement this\n      page,\n      structTreeLayer: null,\n      // TODO: Implement this\n      viewport: clonedViewport\n    };\n    const renderParameters = {\n      annotations,\n      annotationStorage: pdf.annotationStorage,\n      div: layer,\n      imageResourcesPath,\n      linkService,\n      page,\n      renderForms,\n      viewport: clonedViewport\n    };\n    layer.innerHTML = '';\n    try {\n      new pdfjs.AnnotationLayer(annotationLayerParameters).render(renderParameters);\n      // Intentional immediate callback\n      onRenderSuccess();\n    } catch (error) {\n      onRenderError(error);\n    }\n    return () => {\n      // TODO: Cancel running task?\n    };\n  }, [annotations, imageResourcesPath, linkService, page, pdf, renderForms, viewport]);\n  return _jsx(\"div\", {\n    className: clsx('react-pdf__Page__annotations', 'annotationLayer'),\n    ref: layerElement\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}