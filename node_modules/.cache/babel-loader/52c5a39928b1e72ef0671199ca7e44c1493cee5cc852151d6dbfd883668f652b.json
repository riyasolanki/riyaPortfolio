{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useContext, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport makeCancellable from 'make-cancellable-promise';\nimport makeEventProps from 'make-event-props';\nimport clsx from 'clsx';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport DocumentContext from './DocumentContext';\nimport OutlineContext from './OutlineContext';\nimport OutlineItem from './OutlineItem';\nimport { cancelRunningTask } from './shared/utils';\nimport { useResolver } from './shared/hooks';\nimport { eventProps, isClassName, isPdf, isRef } from './shared/propTypes';\nexport default function Outline(props) {\n  const context = useContext(DocumentContext);\n  invariant(context, 'Unable to find Document context. Did you wrap <Outline /> in <Document />?');\n  const mergedProps = Object.assign(Object.assign({}, context), props);\n  const {\n      className,\n      inputRef,\n      onItemClick: onItemClickProps,\n      onLoadError: onLoadErrorProps,\n      onLoadSuccess: onLoadSuccessProps,\n      pdf\n    } = mergedProps,\n    otherProps = __rest(mergedProps, [\"className\", \"inputRef\", \"onItemClick\", \"onLoadError\", \"onLoadSuccess\", \"pdf\"]);\n  invariant(pdf, 'Attempted to load an outline, but no document was specified.');\n  const [outlineState, outlineDispatch] = useResolver();\n  const {\n    value: outline,\n    error: outlineError\n  } = outlineState;\n  /**\n   * Called when an outline is read successfully\n   */\n  function onLoadSuccess() {\n    if (typeof outline === 'undefined' || outline === false) {\n      return;\n    }\n    if (onLoadSuccessProps) {\n      onLoadSuccessProps(outline);\n    }\n  }\n  /**\n   * Called when an outline failed to read successfully\n   */\n  function onLoadError() {\n    if (!outlineError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, outlineError.toString());\n    if (onLoadErrorProps) {\n      onLoadErrorProps(outlineError);\n    }\n  }\n  function onItemClick(_ref) {\n    let {\n      dest,\n      pageIndex,\n      pageNumber\n    } = _ref;\n    if (onItemClickProps) {\n      onItemClickProps({\n        dest,\n        pageIndex,\n        pageNumber\n      });\n    }\n  }\n  function resetOutline() {\n    outlineDispatch({\n      type: 'RESET'\n    });\n  }\n  useEffect(resetOutline, [outlineDispatch, pdf]);\n  function loadOutline() {\n    if (!pdf) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    const cancellable = makeCancellable(pdf.getOutline());\n    const runningTask = cancellable;\n    cancellable.promise.then(nextOutline => {\n      outlineDispatch({\n        type: 'RESOLVE',\n        value: nextOutline\n      });\n    }).catch(error => {\n      outlineDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(runningTask);\n  }\n  useEffect(loadOutline, [outlineDispatch, pdf]);\n  useEffect(() => {\n    if (outline === undefined) {\n      return;\n    }\n    if (outline === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  },\n  // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [outline]);\n  const childContext = {\n    onClick: onItemClick\n  };\n  const eventProps = useMemo(() => makeEventProps(otherProps, () => outline), [otherProps, outline]);\n  if (!outline) {\n    return null;\n  }\n  function renderOutline() {\n    if (!outline) {\n      return null;\n    }\n    return React.createElement(\"ul\", null, outline.map((item, itemIndex) => React.createElement(OutlineItem, {\n      key: typeof item.dest === 'string' ? item.dest : itemIndex,\n      item: item\n    })));\n  }\n  return React.createElement(\"div\", Object.assign({\n    className: clsx('react-pdf__Outline', className),\n    ref: inputRef\n  }, eventProps), React.createElement(OutlineContext.Provider, {\n    value: childContext\n  }, renderOutline()));\n}\nOutline.propTypes = Object.assign(Object.assign({}, eventProps), {\n  className: isClassName,\n  inputRef: isRef,\n  onItemClick: PropTypes.func,\n  onLoadError: PropTypes.func,\n  onLoadSuccess: PropTypes.func,\n  pdf: isPdf\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}