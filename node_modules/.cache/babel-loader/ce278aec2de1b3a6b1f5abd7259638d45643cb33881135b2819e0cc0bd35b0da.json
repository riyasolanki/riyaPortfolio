{"ast":null,"code":"// As defined on the list of supported events: https://reactjs.org/docs/events.html\nexport const clipboardEvents = ['onCopy', 'onCut', 'onPaste'];\nexport const compositionEvents = ['onCompositionEnd', 'onCompositionStart', 'onCompositionUpdate'];\nexport const focusEvents = ['onFocus', 'onBlur'];\nexport const formEvents = ['onInput', 'onInvalid', 'onReset', 'onSubmit'];\nexport const imageEvents = ['onLoad', 'onError'];\nexport const keyboardEvents = ['onKeyDown', 'onKeyPress', 'onKeyUp'];\nexport const mediaEvents = ['onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onError', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting'];\nexport const mouseEvents = ['onClick', 'onContextMenu', 'onDoubleClick', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp'];\nexport const dragEvents = ['onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop'];\nexport const selectionEvents = ['onSelect'];\nexport const touchEvents = ['onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart'];\nexport const pointerEvents = ['onPointerDown', 'onPointerMove', 'onPointerUp', 'onPointerCancel', 'onGotPointerCapture', 'onLostPointerCapture', 'onPointerEnter', 'onPointerLeave', 'onPointerOver', 'onPointerOut'];\nexport const uiEvents = ['onScroll'];\nexport const wheelEvents = ['onWheel'];\nexport const animationEvents = ['onAnimationStart', 'onAnimationEnd', 'onAnimationIteration'];\nexport const transitionEvents = ['onTransitionEnd'];\nexport const otherEvents = ['onToggle'];\nexport const changeEvents = ['onChange'];\nexport const allEvents = [...clipboardEvents, ...compositionEvents, ...focusEvents, ...formEvents, ...imageEvents, ...keyboardEvents, ...mediaEvents, ...mouseEvents, ...dragEvents, ...selectionEvents, ...touchEvents, ...pointerEvents, ...uiEvents, ...wheelEvents, ...animationEvents, ...transitionEvents, ...changeEvents, ...otherEvents];\n/**\n * Returns an object with on-event callback props curried with provided args.\n *\n * @template ArgsType Type of arguments to curry on-event callbacks with.\n * @param {PropsType} props Props passed to a component.\n * @param {GetArgs<ArgsType>} [getArgs] A function that returns argument(s) on-event callbacks\n *   shall be curried with.\n */\nexport default function makeEventProps(props, getArgs) {\n  const eventProps = {};\n  for (const eventName of allEvents) {\n    const eventHandler = props[eventName];\n    if (!eventHandler) {\n      continue;\n    }\n    if (getArgs) {\n      eventProps[eventName] = event => eventHandler(event, getArgs(eventName));\n    } else {\n      eventProps[eventName] = eventHandler;\n    }\n  }\n  return eventProps;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}