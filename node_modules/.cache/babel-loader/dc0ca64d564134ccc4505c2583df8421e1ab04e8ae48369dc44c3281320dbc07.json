{"ast":null,"code":"import React, { useContext, useEffect, useMemo } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport * as pdfjs from 'pdfjs-dist';\nimport PageContext from '../PageContext';\nimport { useResolver } from '../shared/hooks';\nimport { cancelRunningTask, isCancelException, makePageCallback } from '../shared/utils';\nexport default function PageSVG() {\n  const context = useContext(PageContext);\n  invariant(context, 'Unable to find Page context.');\n  const {\n    onRenderSuccess: onRenderSuccessProps,\n    onRenderError: onRenderErrorProps,\n    page,\n    rotate,\n    scale\n  } = context;\n  const [svgState, svgDispatch] = useResolver();\n  const {\n    value: svg,\n    error: svgError\n  } = svgState;\n  invariant(page, 'Attempted to render page SVG, but no page was specified.');\n  /**\n   * Called when a page is rendered successfully\n   */\n  function onRenderSuccess() {\n    if (!page) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    if (onRenderSuccessProps) {\n      onRenderSuccessProps(makePageCallback(page, scale));\n    }\n  }\n  /**\n   * Called when a page fails to render\n   */\n  function onRenderError() {\n    if (!svgError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    if (isCancelException(svgError)) {\n      return;\n    }\n    warning(false, svgError.toString());\n    if (onRenderErrorProps) {\n      onRenderErrorProps(svgError);\n    }\n  }\n  const viewport = useMemo(() => page.getViewport({\n    scale,\n    rotation: rotate\n  }), [page, rotate, scale]);\n  function resetSVG() {\n    svgDispatch({\n      type: 'RESET'\n    });\n  }\n  useEffect(resetSVG, [page, svgDispatch, viewport]);\n  function renderSVG() {\n    if (!page) {\n      return;\n    }\n    const cancellable = makeCancellable(page.getOperatorList());\n    cancellable.promise.then(operatorList => {\n      const svgGfx = new pdfjs.SVGGraphics(page.commonObjs, page.objs);\n      svgGfx.getSVG(operatorList, viewport).then(nextSvg => {\n        svgDispatch({\n          type: 'RESOLVE',\n          value: nextSvg\n        });\n      }).catch(error => {\n        svgDispatch({\n          type: 'REJECT',\n          error\n        });\n      });\n    }).catch(error => {\n      svgDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(cancellable);\n  }\n  useEffect(renderSVG, [page, svgDispatch, viewport]);\n  useEffect(() => {\n    if (svg === undefined) {\n      return;\n    }\n    if (svg === false) {\n      onRenderError();\n      return;\n    }\n    onRenderSuccess();\n  },\n  // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [svg]);\n  function drawPageOnContainer(element) {\n    if (!element || !svg) {\n      return;\n    }\n    // Append SVG element to the main container, if this hasn't been done already\n    if (!element.firstElementChild) {\n      element.appendChild(svg);\n    }\n    const {\n      width,\n      height\n    } = viewport;\n    svg.setAttribute('width', `${width}`);\n    svg.setAttribute('height', `${height}`);\n  }\n  const {\n    width,\n    height\n  } = viewport;\n  return React.createElement(\"div\", {\n    className: \"react-pdf__Page__svg\",\n    // Note: This cannot be shortened, as we need this function to be called with each render.\n    ref: ref => drawPageOnContainer(ref),\n    style: {\n      display: 'block',\n      backgroundColor: 'white',\n      overflow: 'hidden',\n      width,\n      height,\n      userSelect: 'none'\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}